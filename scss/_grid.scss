.container {
  @include make-container();
}

.row {
  margin-left: auto;
  margin-right: auto;
  display: flex;
  width: 100%;
  flex-wrap: wrap;
  > br {
    display: block;
    width: 100%;
    height: 0;
    content: '';
    margin: 0;
    padding: 0;
  }
}

.container > .row {
  margin-left: $grid-gutter-width / -2;
  margin-right: $grid-gutter-width / -2;
  width: auto;
}

[class*='col-'] {
  width: 100%;
}

// col-7 will fit col-6 + col-5 --OR-- col-5 + col-5 + col-4
// col-6 will fit col-5 + col-4 --OR-- col-4 + col-4 + col-3
// col-5 will fit col-4 + col-3 --OR-- col-3 + col-3 + col-2
// col-4 will fit col-3 + col-2 --OR-- col-2 + col-2 + col-1
// col-3 will fit col-2 + col-1 --OR-- col-1 + col-1 + col-0
// col-2 will fit col-1 + col-0
@each $breakpoint in map-keys($grid-breakpoints) {
  @each $size, $length in $sizes {
    .col-#{$size} {
      width: map-get($sizes, $size);
      // @if (type-of($size) == number and $size > 0) {
      @if ($grid-gutter-width != 0) {
        padding-left: $grid-gutter-width / 2;
        padding-right: $grid-gutter-width / 2;
      }
      // }
    }
    .offset-#{$size} {
      margin-left: map-get($sizes, $size);
    }
  }

  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    @each $size, $length in $sizes {
      [class*='col-'].col-#{$breakpoint}-#{$size} {
        width: map-get($sizes, $size);
      }
      [class*='offset-'].offset-#{$breakpoint}-#{$size} {
        margin-left: map-get($sizes, $size);
      }
    }
  }
}
